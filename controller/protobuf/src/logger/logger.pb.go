// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: src/logger/logger.proto

package logger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SaveOriginLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName  string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	StackTrace   string `protobuf:"bytes,2,opt,name=stackTrace,proto3" json:"stackTrace,omitempty"`
	FunctionName string `protobuf:"bytes,3,opt,name=functionName,proto3" json:"functionName,omitempty"`
	ProcessId    string `protobuf:"bytes,4,opt,name=ProcessId,proto3" json:"ProcessId,omitempty"`
}

func (x *SaveOriginLogRequest) Reset() {
	*x = SaveOriginLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_logger_logger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveOriginLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveOriginLogRequest) ProtoMessage() {}

func (x *SaveOriginLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_logger_logger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveOriginLogRequest.ProtoReflect.Descriptor instead.
func (*SaveOriginLogRequest) Descriptor() ([]byte, []int) {
	return file_src_logger_logger_proto_rawDescGZIP(), []int{0}
}

func (x *SaveOriginLogRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SaveOriginLogRequest) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

func (x *SaveOriginLogRequest) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *SaveOriginLogRequest) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

type SaveServiceLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Severity  string                 `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	Message   string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	OriginLog *SaveOriginLogRequest  `protobuf:"bytes,4,opt,name=originLog,proto3" json:"originLog,omitempty"`
}

func (x *SaveServiceLogRequest) Reset() {
	*x = SaveServiceLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_logger_logger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveServiceLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveServiceLogRequest) ProtoMessage() {}

func (x *SaveServiceLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_logger_logger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveServiceLogRequest.ProtoReflect.Descriptor instead.
func (*SaveServiceLogRequest) Descriptor() ([]byte, []int) {
	return file_src_logger_logger_proto_rawDescGZIP(), []int{1}
}

func (x *SaveServiceLogRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SaveServiceLogRequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SaveServiceLogRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SaveServiceLogRequest) GetOriginLog() *SaveOriginLogRequest {
	if x != nil {
		return x.OriginLog
	}
	return nil
}

type SaveServiceLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SaveServiceLogResponse) Reset() {
	*x = SaveServiceLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_logger_logger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveServiceLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveServiceLogResponse) ProtoMessage() {}

func (x *SaveServiceLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_logger_logger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveServiceLogResponse.ProtoReflect.Descriptor instead.
func (*SaveServiceLogResponse) Descriptor() ([]byte, []int) {
	return file_src_logger_logger_proto_rawDescGZIP(), []int{2}
}

func (x *SaveServiceLogResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_src_logger_logger_proto protoreflect.FileDescriptor

var file_src_logger_logger_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x72, 0x63, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x53,
	0x61, 0x76, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x15, 0x53, 0x61, 0x76, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x22, 0x32, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x51, 0x0a, 0x0a, 0x47, 0x52,
	0x50, 0x43, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x16, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a,
	0x0a, 0x73, 0x72, 0x63, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_src_logger_logger_proto_rawDescOnce sync.Once
	file_src_logger_logger_proto_rawDescData = file_src_logger_logger_proto_rawDesc
)

func file_src_logger_logger_proto_rawDescGZIP() []byte {
	file_src_logger_logger_proto_rawDescOnce.Do(func() {
		file_src_logger_logger_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_logger_logger_proto_rawDescData)
	})
	return file_src_logger_logger_proto_rawDescData
}

var file_src_logger_logger_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_src_logger_logger_proto_goTypes = []interface{}{
	(*SaveOriginLogRequest)(nil),   // 0: SaveOriginLogRequest
	(*SaveServiceLogRequest)(nil),  // 1: SaveServiceLogRequest
	(*SaveServiceLogResponse)(nil), // 2: SaveServiceLogResponse
	(*timestamppb.Timestamp)(nil),  // 3: google.protobuf.Timestamp
}
var file_src_logger_logger_proto_depIdxs = []int32{
	3, // 0: SaveServiceLogRequest.timestamp:type_name -> google.protobuf.Timestamp
	0, // 1: SaveServiceLogRequest.originLog:type_name -> SaveOriginLogRequest
	1, // 2: GRPCLogger.SaveServiceLog:input_type -> SaveServiceLogRequest
	2, // 3: GRPCLogger.SaveServiceLog:output_type -> SaveServiceLogResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_src_logger_logger_proto_init() }
func file_src_logger_logger_proto_init() {
	if File_src_logger_logger_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_logger_logger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveOriginLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_logger_logger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveServiceLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_logger_logger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveServiceLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_logger_logger_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_logger_logger_proto_goTypes,
		DependencyIndexes: file_src_logger_logger_proto_depIdxs,
		MessageInfos:      file_src_logger_logger_proto_msgTypes,
	}.Build()
	File_src_logger_logger_proto = out.File
	file_src_logger_logger_proto_rawDesc = nil
	file_src_logger_logger_proto_goTypes = nil
	file_src_logger_logger_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GRPCLoggerClient is the client API for GRPCLogger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCLoggerClient interface {
	SaveServiceLog(ctx context.Context, in *SaveServiceLogRequest, opts ...grpc.CallOption) (*SaveServiceLogResponse, error)
}

type gRPCLoggerClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCLoggerClient(cc grpc.ClientConnInterface) GRPCLoggerClient {
	return &gRPCLoggerClient{cc}
}

func (c *gRPCLoggerClient) SaveServiceLog(ctx context.Context, in *SaveServiceLogRequest, opts ...grpc.CallOption) (*SaveServiceLogResponse, error) {
	out := new(SaveServiceLogResponse)
	err := c.cc.Invoke(ctx, "/GRPCLogger/SaveServiceLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCLoggerServer is the server API for GRPCLogger service.
type GRPCLoggerServer interface {
	SaveServiceLog(context.Context, *SaveServiceLogRequest) (*SaveServiceLogResponse, error)
}

// UnimplementedGRPCLoggerServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCLoggerServer struct {
}

func (*UnimplementedGRPCLoggerServer) SaveServiceLog(context.Context, *SaveServiceLogRequest) (*SaveServiceLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveServiceLog not implemented")
}

func RegisterGRPCLoggerServer(s *grpc.Server, srv GRPCLoggerServer) {
	s.RegisterService(&_GRPCLogger_serviceDesc, srv)
}

func _GRPCLogger_SaveServiceLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveServiceLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCLoggerServer).SaveServiceLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPCLogger/SaveServiceLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCLoggerServer).SaveServiceLog(ctx, req.(*SaveServiceLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPCLogger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GRPCLogger",
	HandlerType: (*GRPCLoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveServiceLog",
			Handler:    _GRPCLogger_SaveServiceLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/logger/logger.proto",
}
